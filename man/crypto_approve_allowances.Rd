% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crypto_allowances.R
\name{crypto_approve_allowances}
\alias{crypto_approve_allowances}
\title{Approve crypto allowances for spenders}
\usage{
crypto_approve_allowances(
  config,
  hbar_allowances = NULL,
  token_allowances = NULL,
  nft_allowances = NULL,
  wait_for_receipt = TRUE,
  .transport = NULL
)
}
\arguments{
\item{config}{A configuration list created by \code{\link[=hadeda_config]{hadeda_config()}}.}

\item{hbar_allowances}{Optional hbar allowance definitions supplied as a data
frame or list with \code{spender_account_id} and \code{amount} fields. An optional
\code{owner_account_id} column can override the operator account.}

\item{token_allowances}{Optional token allowance definitions with
\code{token_id}, \code{spender_account_id}, and \code{amount} fields. Include an optional
\code{owner_account_id} column to override the operator account.}

\item{nft_allowances}{Optional NFT allowance definitions with \code{token_id} and
\code{spender_account_id} fields plus either \code{serial_numbers} or \code{all_serials}.}

\item{wait_for_receipt}{Logical toggling whether the handler should await a
transaction receipt acknowledgement.}

\item{.transport}{Optional transport override ("rest" or "grpc").}
}
\value{
A tibble summarising the acknowledgement returned by the handler.
}
\description{
Submit a CryptoService \code{approveAllowances} transaction. The helper accepts
tidy allowance definitions for hbar, fungible tokens, and NFTs, normalises
the payloads, and delegates to a user-supplied gRPC handler.
}
