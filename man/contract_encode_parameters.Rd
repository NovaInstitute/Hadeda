% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/contract_encode.R
\name{contract_encode_parameters}
\alias{contract_encode_parameters}
\title{Encode smart contract function parameters}
\usage{
contract_encode_parameters(signature, args = list(), include_selector = TRUE)
}
\arguments{
\item{signature}{Canonical function signature such as
\code{"transfer(address,uint256)"}. Constructors can omit the function name and
pass only the parameter list (for example \code{"uint256,address"}).}

\item{args}{List or atomic vector of argument values corresponding to the
types declared in \code{signature}.}

\item{include_selector}{Logical indicating whether the 4-byte function
selector should prefix the encoded payload. Set to \code{FALSE} when encoding
constructor parameters that are appended to the contract bytecode.}
}
\value{
A length-one character vector containing ABI-encoded call data with a
\verb{0x} prefix.
}
\description{
Convert tidy R values into Ethereum-compatible ABI call data suitable for
Hedera contract calls. The helper supports a limited set of static types and
returns a hexadecimal string with a \verb{0x} prefix.
}
\details{
When Keccak-256 hashing is unavailable in the host environment the
helper aborts with an informative message so callers can supply pre-encoded
\code{call_data} to \code{\link[=contract_call]{contract_call()}}.
}
\examples{
contract_encode_parameters(
  "transfer(address,uint256)",
  list("0x00000000000000000000000000000000000000a1", "42")
)

}
